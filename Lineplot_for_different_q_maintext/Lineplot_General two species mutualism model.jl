###################### Line plot Fig.3 (c) of main text  #######################################
################### GENERAL TWO SPECIES MUTUALISM MODEL ########################################
################################################################################################

using Distributed #package used for multiprocessing in julia
nprocs()
addprocs(15) # add cores
w=workers() #set the worker cores

using Plots
using DataFrames
using Statistics
using StatsPlots
using VectorizedStatistics
using LaTeXStrings
using DelimitedFiles
using CSV


@everywhere using Statistics
# function to generate trajectories 
@everywhere function gen(q,ss) #species response correlation, takes values q=0.0,0.45, 0.9 and ss is the number of replicates
  T=150000 #total time
  dt=0.1 #step size
  N=convert(Int,T/dt) #Number of iteration steps
  sig_X=0.03 #noise intensity for mutualist 1
  sig_Y=0.03 ##noise intensity for mutualist 2
  k=0.5 #fixed temporal correlation coefficient
  
  

  sub_mat=zeros(N,ss) # zero matrix to store the trajectories
    
  for ll in 1:ss

    noise=zeros(N,2)
    eta = abs.(randn(2))
    
    for i in 1:N
      noise[i,:]=copy(eta)
      eta=k.*eta.+sqrt(1-k^2).*(sqrt(abs(q)).*randn(1).+sqrt(1-abs(q)).*randn(2))
    end

    ###spectral mimicry used to generate noise from the original one so that it follows standard normal distribution
    rept=zeros(N,2)

    rept[:,1]=sort(randn(N))
    rept[:,2]=sort(randn(N))

    n1=invperm(sortperm(noise[:,1]))
    n2=invperm(sortperm(noise[:,2]))
    noise[:,1]=rept[n1,1]         
    noise[:,2]=rept[n2,2]


    m0=-0.8 #initial value of the control parameter
     

    x0=1.436 #initial abundance of mutualist 1
    y0=1.558 #initial abundance of mutualist 2
        
    x=zeros(N)
    y=zeros(N)
    m=zeros(N)
       
    x[1]=x0
    y[1]=y0
    m[1]=m0
    
    noise.=sqrt(dt).*noise
    
    for i in 2:N
      x[i]=x[i-1].+(x[i-1].*(-1.0.-x[i-1]).+((4.0.*x[i-1].*y[i-1])./(1.0 .+y[i-1]))).*dt.+x[i-1].*sig_X.*noise[i-1,1]
      y[i]=y[i-1].+(y[i-1].*(m[i-1].-y[i-1]).+((4.0.*x[i-1].*y[i-1])./(1.0 .+x[i-1]))).*dt+y[i-1].*sig_Y.*noise[i-1,2]
      m[i]=m[i-1].-((0.35)/T)*dt
    end
    
    sub_mat[:,ll].=x
    println(ll)
  end
  
  return sub_mat
  
end

#calculate the control parameter values
T=150000
dt=0.1
N=convert(Int,T/dt)
m=zeros(N)
m[1]=-0.8
for i in 2:N
  m[i]=m[i-1].-((0.35)/T)*dt
end

#Total 1500 replicates generated for each q with distributed task acrross the 15 cores 

rep=100 #replicas generated by each core

## generate data for species response correlation q=0.0

q=0.0   #species response correlation

t1=@spawnat w[1] gen(q,rep)
t2=@spawnat w[2] gen(q,rep)
t3=@spawnat w[3] gen(q,rep)
t4=@spawnat w[4] gen(q,rep)
t5=@spawnat w[5] gen(q,rep)
t6=@spawnat w[6] gen(q,rep)
t7=@spawnat w[7] gen(q,rep)
t8=@spawnat w[8] gen(q,rep)
t9=@spawnat w[9] gen(q,rep)
t10=@spawnat w[10] gen(q,rep)
t11=@spawnat w[11] gen(q,rep)
t12=@spawnat w[12] gen(q,rep)
t13=@spawnat w[13] gen(q,rep)
t14=@spawnat w[14] gen(q,rep)
t15=@spawnat w[15] gen(q,rep)

sub1=fetch(t1)
sub2=fetch(t2)
sub3=fetch(t3)
sub4=fetch(t4)
sub5=fetch(t5)
sub6=fetch(t6)
sub7=fetch(t7)
sub8=fetch(t8)
sub9=fetch(t9)
sub10=fetch(t10)
sub11=fetch(t11)
sub12=fetch(t12)
sub13=fetch(t13)
sub14=fetch(t14)
sub15=fetch(t15)

#final matrix with 1500 replicate trajectories as columns
mat=hcat(sub1,sub2,sub3,sub4,sub5,sub6,sub7,sub8,sub9,sub10,sub11,sub12,sub13,sub14,sub15)


M=mat[1:100:end,:]
R=m[1:100:end,:]

mn=mean(M,dims=2)#calculate mean across the replicates in each time point
#calculation of 5th and 95th percentiles
p5 = vquantile(copy(M),0.05,dims=2)  
p95 = vquantile(copy(M), 0.95; dims=2)  

data=DataFrame(para=vec(R[:,1]),mn=vec(mn),p5s=vec(p5),p95s=vec(p95)) #make a dataframe


####plot the mean trajectory with 5th and 95th percentile region, q=0.0

@df data plot(:para,:mn,ribbon=(:mn-:p5s,-:mn+:p95s),fillalpha=0.1,framestyle=:box,label="q=0.0",foreground_color_legend=nothing,
legendfontsize=11,linewidth=2.5,thickness_scaling=1.1,legend=:outertop,legend_column=-1,
grid=false,xlab=L"growth\; rate\;of\;mutualist\;2 \;  (r_2)",widen=false,color=:red2,
tickfontsize=13,guidefontsize=17,ylab=L"abundance\; of\; mutualist \;1 \;(M_1)",xlim=(-1.02,-0.84),ylim=(0,1.6))


## generate data for species response correlation q=0.45
q=0.45  

t1=@spawnat w[1] gen(q,rep)
t2=@spawnat w[2] gen(q,rep)
t3=@spawnat w[3] gen(q,rep)
t4=@spawnat w[4] gen(q,rep)
t5=@spawnat w[5] gen(q,rep)
t6=@spawnat w[6] gen(q,rep)
t7=@spawnat w[7] gen(q,rep)
t8=@spawnat w[8] gen(q,rep)
t9=@spawnat w[9] gen(q,rep)
t10=@spawnat w[10] gen(q,rep)
t11=@spawnat w[11] gen(q,rep)
t12=@spawnat w[12] gen(q,rep)
t13=@spawnat w[13] gen(q,rep)
t14=@spawnat w[14] gen(q,rep)
t15=@spawnat w[15] gen(q,rep)

sub1=fetch(t1)
sub2=fetch(t2)
sub3=fetch(t3)
sub4=fetch(t4)
sub5=fetch(t5)
sub6=fetch(t6)
sub7=fetch(t7)
sub8=fetch(t8)
sub9=fetch(t9)
sub10=fetch(t10)
sub11=fetch(t11)
sub12=fetch(t12)
sub13=fetch(t13)
sub14=fetch(t14)
sub15=fetch(t15)

#final matrix with 1500 replicate trajectories as columns
mat=hcat(sub1,sub2,sub3,sub4,sub5,sub6,sub7,sub8,sub9,sub10,sub11,sub12,sub13,sub14,sub15)

M=mat[1:100:end,:]
R=m[1:100:end,:]

mn=mean(M,dims=2)#calculate mean across the replicates in each time point
#calculation of 5th and 95th percentiles
p5 = vquantile(copy(M),0.05,dims=2)  
p95 = vquantile(copy(M), 0.95; dims=2)  

data=DataFrame(para=vec(R[:,1]),mn=vec(mn),p5s=vec(p5),p95s=vec(p95)) #make a dataframe


####plot the mean trajectory with 5th and 95th percentile region, q=0.45


@df data plot!(:para,:mn,ribbon=(:mn-:p5s,-:mn+:p95s),fillalpha=0.1,framestyle=:box,label="q=0.45",foreground_color_legend=nothing,
legendfontsize=11,linewidth=2.5,thickness_scaling=1.1,legend=:outertop,legend_column=-1,
grid=false,xlab=L"growth\; rate\;of\;Mutualist\;2 \;  (r_2)",widen=false,color=:darkorange,
tickfontsize=13,guidefontsize=17,ylab=L"abundance\; of\; mutualist \;1 \;(M_1)",xlim=(-1.02,-0.84),ylim=(0,1.6))

## generate data for species response correlation q=0.9
q=0.9 

t1=@spawnat w[1] gen(q,rep)
t2=@spawnat w[2] gen(q,rep)
t3=@spawnat w[3] gen(q,rep)
t4=@spawnat w[4] gen(q,rep)
t5=@spawnat w[5] gen(q,rep)
t6=@spawnat w[6] gen(q,rep)
t7=@spawnat w[7] gen(q,rep)
t8=@spawnat w[8] gen(q,rep)
t9=@spawnat w[9] gen(q,rep)
t10=@spawnat w[10] gen(q,rep)
t11=@spawnat w[11] gen(q,rep)
t12=@spawnat w[12] gen(q,rep)
t13=@spawnat w[13] gen(q,rep)
t14=@spawnat w[14] gen(q,rep)
t15=@spawnat w[15] gen(q,rep)

sub1=fetch(t1)
sub2=fetch(t2)
sub3=fetch(t3)
sub4=fetch(t4)
sub5=fetch(t5)
sub6=fetch(t6)
sub7=fetch(t7)
sub8=fetch(t8)
sub9=fetch(t9)
sub10=fetch(t10)
sub11=fetch(t11)
sub12=fetch(t12)
sub13=fetch(t13)
sub14=fetch(t14)
sub15=fetch(t15)

#final matrix with 1500 replicate trajectories as columns
mat=hcat(sub1,sub2,sub3,sub4,sub5,sub6,sub7,sub8,sub9,sub10,sub11,sub12,sub13,sub14,sub15)


M=mat[1:100:end,:]
R=m[1:100:end,:]

mn=mean(M,dims=2)#calculate mean across the replicates in each time point
#calculation of 5th and 95th percentiles
p5 = vquantile(copy(M),0.05,dims=2)  
p95 = vquantile(copy(M), 0.95; dims=2)  

data=DataFrame(para=vec(R[:,1]),mn=vec(mn),p5s=vec(p5),p95s=vec(p95)) #make a dataframe


####plot the mean trajectory with 5th and 95th percentile region, q=0.9


@df data plot!(:para,:mn,ribbon=(:mn-:p5s,-:mn+:p95s),fillalpha=0.1,framestyle=:box,label="q=0.9",foreground_color_legend=nothing,
legendfontsize=11,linewidth=2.5,thickness_scaling=1.1,legend=:outertop,legend_column=-1,
grid=false,xlab=L"growth\; rate\;of\;mutualist\;2 \;  (r_2)",widen=false,color=:darkgreen,
tickfontsize=13,guidefontsize=17,ylab=L"abundance\; of\; mutualist \;1 \;(M_1)",xlim=(-1.02,-0.82),ylim=(0,1.6))


vline!([-1],linewidth=1.5,linestyle=:dash,color=:darkgrey,label="",dpi=750) ## actual tipping point in deterministic system

#savefig("mutob_lineplot_k0.5.png")






