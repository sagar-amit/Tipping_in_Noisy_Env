###################### Line plot Fig.3 (a) of main text #######################################
################################ SHALLOW-LAKE MODEL  #########################################
###############################################################################################


using Distributed #package used for multiprocessing in julia
nprocs()
addprocs(15) # add cores
w=workers()  ##set the worker cores

using Plots
using DataFrames
using Statistics
using StatsPlots
using VectorizedStatistics
using LaTeXStrings
using DelimitedFiles
using CSV

@everywhere using Statistics
# function to generate trajectories 
@everywhere function gen(q,ss)#species response correlation, takes values q=0.0,0.45, 0.9 and ss is the number of replicates
    T=500000 #total time
    dt=0.1     #step size
    N=convert(Int,T/dt) #Number of iteration steps
    
    sig_X=0.02 #noise intensity for Macrophyte population
    sig_Y=0.02 #noise intensity for Algae population
    k=0.5  #fixed temporal correlation coefficient
    
    sub_mat=zeros(N,ss) # zero matrix to store the trajectories
    
    for ll in 1:ss
        noise=zeros(N,2)
        eta = abs.(randn(2))
        for i in 1:N
            noise[i,:]=copy(eta)
            eta=k.*eta.+sqrt(1-k^2).*(sqrt(abs(q)).*randn(1).+sqrt(1-abs(q)).*randn(2))
        end
        
        ###spectral mimicry used to generate noise from the original one so that it follows standard normal distribution  
        rept=zeros(N,2)
        
        rept[:,1]=sort(randn(N))
        rept[:,2]=sort(randn(N))

        n1=invperm(sortperm(noise[:,1]))
        n2=invperm(sortperm(noise[:,2]))
        noise[:,1]=rept[n1,1]         
        noise[:,2]=rept[n2,2]

        #parameter values
        r1=0.05
        r2=0.1
        K=1
        h1=0.2
        h2=2
        p=4
        E0=4 #initial value of the control parameter
        
        
        
        x0=0.987 #initial abundance of Macrophyte
        y0=0.674 #initial abundance of Algae


        x=zeros(N)
        y=zeros(N)
        E=zeros(N)



        x[1]=x0
        y[1]=y0
        E[1]=E0


        noise.=sqrt(dt).*noise
        
        for i in 2:N
            x[i]=x[i-1].+r1 .*x[i-1].*(1 .-(x[i-1]./(K.*h2.^p)).*(h2.^p+y[i-1].^p)).*dt.+x[i-1].*sig_X.*noise[i-1,1]
            y[i]=y[i-1].+r2.*y[i-1].*(1 .-(y[i-1]./(h1 .*E[i-1])).*(h1 .+x[i-1])).*dt.+y[i-1].*sig_Y.*noise[i-1,2]
            E[i]=E[i-1].+((4)./T).*dt
        end
        
        sub_mat[:,ll].=x
        println(ll)
    end

  return sub_mat
  
end

#calculate the control parameter values
T=500000
dt=0.1
N=convert(Int,T/dt)
m=zeros(N)
m[1]=4
for i in 2:N
  m[i]=m[i-1].+(4/T)*dt
end

#Total 1500 replicates generated for each q with distributed task acrross the 15 cores 

rep=100 #replicas generated by each core

## generate data for species response correlation q=0.0
q=0.0

t1=@spawnat w[1] gen(q,rep)
t2=@spawnat w[2] gen(q,rep)
t3=@spawnat w[3] gen(q,rep)
t4=@spawnat w[4] gen(q,rep)
t5=@spawnat w[5] gen(q,rep)
t6=@spawnat w[6] gen(q,rep)
t7=@spawnat w[7] gen(q,rep)
t8=@spawnat w[8] gen(q,rep)
t9=@spawnat w[9] gen(q,rep)
t10=@spawnat w[10] gen(q,rep)
t11=@spawnat w[11] gen(q,rep)
t12=@spawnat w[12] gen(q,rep)
t13=@spawnat w[13] gen(q,rep)
t14=@spawnat w[14] gen(q,rep)
t15=@spawnat w[15] gen(q,rep)

sub1=fetch(t1)
sub2=fetch(t2)
sub3=fetch(t3)
sub4=fetch(t4)
sub5=fetch(t5)
sub6=fetch(t6)
sub7=fetch(t7)
sub8=fetch(t8)
sub9=fetch(t9)
sub10=fetch(t10)
sub11=fetch(t11)
sub12=fetch(t12)
sub13=fetch(t13)
sub14=fetch(t14)
sub15=fetch(t15)

#final matrix with 1500 replicate trajectories as columns (for q=0.0)
mat=hcat(sub1,sub2,sub3,sub4,sub5,sub6,sub7,sub8,sub9,sub10,sub11,sub12,sub13,sub14,sub15)



M=mat[1:100:end,:]       #by using [1:100:end,:], only every 100th data point is retained for computation efficiency (reducing memory usage and computation time) 
R=m[1:100:end,:]         # but one can use M=mat[1:1:end,:], R=m[1:1:end,:] (i.e., whole data) this will not change the result but may increase memory usage and computation time.

mn=mean(M,dims=2)#calculate mean across the replicates in each time point

#calculation of 5th and 95th percentiles
p5 = vquantile(copy(M),0.05,dims=2)  
p95 = vquantile(copy(M), 0.95; dims=2)  

data=DataFrame(para=vec(R[:,1]),mn=vec(mn),p5s=vec(p5),p95s=vec(p95)) #make a dataframe

####plot the mean trajectory with 5th and 95th percentile region, q=0.0
@df data plot(:para,:mn,ribbon=(:mn-:p5s,-:mn+:p95s),fillalpha=0.1,framestyle=:box,label="q=0.0",foreground_color_legend=nothing,
legendfontsize=11,linewidth=2.5,thickness_scaling=1.1,grid=false,legend=:outertop,legend_column=-1,
tickfontsize=14,guidefontsize=17,widen=false,xlab=L"Nutrient\; loading\; (T_{0})",
ylab=L"Macrophyte\; abundance\; (M)",color=:red2,xlim=(4,8))



## generate data for species response correlation q=0.45
q=0.45

t1=@spawnat w[1] gen(q,rep)
t2=@spawnat w[2] gen(q,rep)
t3=@spawnat w[3] gen(q,rep)
t4=@spawnat w[4] gen(q,rep)
t5=@spawnat w[5] gen(q,rep)
t6=@spawnat w[6] gen(q,rep)
t7=@spawnat w[7] gen(q,rep)
t8=@spawnat w[8] gen(q,rep)
t9=@spawnat w[9] gen(q,rep)
t10=@spawnat w[10] gen(q,rep)
t11=@spawnat w[11] gen(q,rep)
t12=@spawnat w[12] gen(q,rep)
t13=@spawnat w[13] gen(q,rep)
t14=@spawnat w[14] gen(q,rep)
t15=@spawnat w[15] gen(q,rep)

sub1=fetch(t1)
sub2=fetch(t2)
sub3=fetch(t3)
sub4=fetch(t4)
sub5=fetch(t5)
sub6=fetch(t6)
sub7=fetch(t7)
sub8=fetch(t8)
sub9=fetch(t9)
sub10=fetch(t10)
sub11=fetch(t11)
sub12=fetch(t12)
sub13=fetch(t13)
sub14=fetch(t14)
sub15=fetch(t15)

#final matrix with 1500 replicate trajectories as columns (for q=0.45)
mat=hcat(sub1,sub2,sub3,sub4,sub5,sub6,sub7,sub8,sub9,sub10,sub11,sub12,sub13,sub14,sub15)


M=mat[1:100:end,:]
R=m[1:100:end,:]

mn=mean(M,dims=2)
p5 = vquantile(copy(M),0.05,dims=2)  
p95 = vquantile(copy(M), 0.95; dims=2)  

data=DataFrame(para=vec(R[:,1]),mn=vec(mn),p5s=vec(p5),p95s=vec(p95))

####plot the mean trajectory with 5th and 95th percentile region, q=0.45
@df data plot!(:para,:mn,ribbon=(:mn-:p5s,-:mn+:p95s),fillalpha=0.1,framestyle=:box,label="q=0.45",foreground_color_legend=nothing,
legendfontsize=11,linewidth=2.5,thickness_scaling=1.1,grid=false,legend=:outertop,legend_column=-1,
tickfontsize=14,guidefontsize=17,widen=false,xlab=L"Nutrient\; loading\; (T_{0})",
ylab=L"Macrophyte\; abundance\; (M)",color=:darkorange,xlim=(4,8))

## generate data for species response correlation q=0.9
q=0.9

t1=@spawnat w[1] gen(q,rep)
t2=@spawnat w[2] gen(q,rep)
t3=@spawnat w[3] gen(q,rep)
t4=@spawnat w[4] gen(q,rep)
t5=@spawnat w[5] gen(q,rep)
t6=@spawnat w[6] gen(q,rep)
t7=@spawnat w[7] gen(q,rep)
t8=@spawnat w[8] gen(q,rep)
t9=@spawnat w[9] gen(q,rep)
t10=@spawnat w[10] gen(q,rep)
t11=@spawnat w[11] gen(q,rep)
t12=@spawnat w[12] gen(q,rep)
t13=@spawnat w[13] gen(q,rep)
t14=@spawnat w[14] gen(q,rep)
t15=@spawnat w[15] gen(q,rep)

sub1=fetch(t1)
sub2=fetch(t2)
sub3=fetch(t3)
sub4=fetch(t4)
sub5=fetch(t5)
sub6=fetch(t6)
sub7=fetch(t7)
sub8=fetch(t8)
sub9=fetch(t9)
sub10=fetch(t10)
sub11=fetch(t11)
sub12=fetch(t12)
sub13=fetch(t13)
sub14=fetch(t14)
sub15=fetch(t15)

#final matrix with 1500 replicate trajectories as columns (for q=0.9)
mat=hcat(sub1,sub2,sub3,sub4,sub5,sub6,sub7,sub8,sub9,sub10,sub11,sub12,sub13,sub14,sub15)


M=mat[1:100:end,:]
R=m[1:100:end,:]

mn=mean(M,dims=2)
p5 = vquantile(copy(M),0.05,dims=2)  
p95 = vquantile(copy(M), 0.95; dims=2)  

data=DataFrame(para=vec(R[:,1]),mn=vec(mn),p5s=vec(p5),p95s=vec(p95))

####plot the mean trajectory with 5th and 95th percentile region, q=0.9
@df data plot!(:para,:mn,ribbon=(:mn-:p5s,-:mn+:p95s),fillalpha=0.1,framestyle=:box,label="q=0.9",foreground_color_legend=nothing,
legendfontsize=11,linewidth=2.5,thickness_scaling=1.1,grid=false,legend=:outertop,legend_column=-1,
tickfontsize=14,guidefontsize=17,widen=false,xlab=L"Nutrient\; loading\; (T_{0})",
ylab=L"Macrophyte\; abundance\; (M)",color=:darkgreen,xlim=(4,8))


vline!([7.288],linewidth=1.5,linestyle=:dash,color=:darkgrey,label="",dpi=750)




#similar code as above but slightly modified to generate trajectories for control parameter changes in backward direction
@everywhere using Statistics
@everywhere function gen_rev(q,ss)
    
    T=500000
    dt=0.1
    N=convert(Int,T/dt)
  
    sig_X=0.02
    sig_Y=0.02
    k=0.5
    
    sub_mat=zeros(N,ss)
    
    for ll in 1:ss
        noise=zeros(N,2)
        eta = abs.(randn(2))
        for i in 1:N
            noise[i,:]=copy(eta)
            eta=k.*eta.+sqrt(1-k^2).*(sqrt(abs(q)).*randn(1).+sqrt(1-abs(q)).*randn(2))
        end
        
        rept=zeros(N,2)

        rept[:,1]=sort(randn(N))
        rept[:,2]=sort(randn(N))

        n1=invperm(sortperm(noise[:,1]))
        n2=invperm(sortperm(noise[:,2]))
        noise[:,1]=rept[n1,1]         
        noise[:,2]=rept[n2,2]


        r1=0.05
        r2=0.1
        K=1
        h1=0.2
        h2=2
        p=4
        E0=8
        
        
        
        x0=0.0042
        y0=7.834


        x=zeros(N)
        y=zeros(N)
        E=zeros(N)



        x[1]=x0
        y[1]=y0
        E[1]=E0
        
        
        noise.=sqrt(dt).*noise
        
        
        for i in 2:N
            x[i]=x[i-1].+r1 .*x[i-1].*(1 .-(x[i-1]./(K.*h2.^p)).*(h2.^p+y[i-1].^p)).*dt.+x[i-1].*sig_X.*noise[i-1,1]
            y[i]=y[i-1].+r2.*y[i-1].*(1 .-(y[i-1]./(h1 .*E[i-1])).*(h1 .+x[i-1])).*dt.+y[i-1].*sig_Y.*noise[i-1,2]
            E[i]=E[i-1].-((4)./T).*dt
        end
        
        sub_mat[:,ll].=x
        println(ll)
    end
    
    return sub_mat
  
end


T=500000
dt=0.1
N=convert(Int,T/dt)
m=zeros(N)
m[1]=8
for i in 2:N
  m[i]=m[i-1].-(4/T)*dt
end

rep=100
q=0.0


t1=@spawnat w[1] gen_rev(q,rep)
t2=@spawnat w[2] gen_rev(q,rep)
t3=@spawnat w[3] gen_rev(q,rep)
t4=@spawnat w[4] gen_rev(q,rep)
t5=@spawnat w[5] gen_rev(q,rep)
t6=@spawnat w[6] gen_rev(q,rep)
t7=@spawnat w[7] gen_rev(q,rep)
t8=@spawnat w[8] gen_rev(q,rep)
t9=@spawnat w[9] gen_rev(q,rep)
t10=@spawnat w[10] gen_rev(q,rep)
t11=@spawnat w[11] gen_rev(q,rep)
t12=@spawnat w[12] gen_rev(q,rep)
t13=@spawnat w[13] gen_rev(q,rep)
t14=@spawnat w[14] gen_rev(q,rep)
t15=@spawnat w[15] gen_rev(q,rep)

sub1=fetch(t1)
sub2=fetch(t2)
sub3=fetch(t3)
sub4=fetch(t4)
sub5=fetch(t5)
sub6=fetch(t6)
sub7=fetch(t7)
sub8=fetch(t8)
sub9=fetch(t9)
sub10=fetch(t10)
sub11=fetch(t11)
sub12=fetch(t12)
sub13=fetch(t13)
sub14=fetch(t14)
sub15=fetch(t15)

mat=hcat(sub1,sub2,sub3,sub4,sub5,sub6,sub7,sub8,sub9,sub10,sub11,sub12,sub13,sub14,sub15)



M=mat[1:100:end,:]
R=m[1:100:end,:]

mn=mean(M,dims=2)
p5 = vquantile(copy(M),0.05,dims=2)  
p95 = vquantile(copy(M), 0.95; dims=2)  

data=DataFrame(para=vec(R[:,1]),mn=vec(mn),p5s=vec(p5),p95s=vec(p95))



@df data plot!(:para,:mn,ribbon=(:mn-:p5s,-:mn+:p95s),fillalpha=0.1,framestyle=:box,label="",foreground_color_legend=nothing,
legendfontsize=11,linewidth=2.5,thickness_scaling=1.1,grid=false,legend=:outertop,legend_column=-1,
tickfontsize=14,guidefontsize=17,widen=false,xlab=L"Nutrient\; loading\; (T_{0})",
ylab=L"Macrophyte\; abundance\; (M)",color=:red2,xlim=(4,8))




q=0.45

t1=@spawnat w[1] gen_rev(q,rep)
t2=@spawnat w[2] gen_rev(q,rep)
t3=@spawnat w[3] gen_rev(q,rep)
t4=@spawnat w[4] gen_rev(q,rep)
t5=@spawnat w[5] gen_rev(q,rep)
t6=@spawnat w[6] gen_rev(q,rep)
t7=@spawnat w[7] gen_rev(q,rep)
t8=@spawnat w[8] gen_rev(q,rep)
t9=@spawnat w[9] gen_rev(q,rep)
t10=@spawnat w[10] gen_rev(q,rep)
t11=@spawnat w[11] gen_rev(q,rep)
t12=@spawnat w[12] gen_rev(q,rep)
t13=@spawnat w[13] gen_rev(q,rep)
t14=@spawnat w[14] gen_rev(q,rep)
t15=@spawnat w[15] gen_rev(q,rep)

sub1=fetch(t1)
sub2=fetch(t2)
sub3=fetch(t3)
sub4=fetch(t4)
sub5=fetch(t5)
sub6=fetch(t6)
sub7=fetch(t7)
sub8=fetch(t8)
sub9=fetch(t9)
sub10=fetch(t10)
sub11=fetch(t11)
sub12=fetch(t12)
sub13=fetch(t13)
sub14=fetch(t14)
sub15=fetch(t15)

mat=hcat(sub1,sub2,sub3,sub4,sub5,sub6,sub7,sub8,sub9,sub10,sub11,sub12,sub13,sub14,sub15)


M=mat[1:100:end,:]
R=m[1:100:end,:]

mn=mean(M,dims=2)
p5 = vquantile(copy(M),0.05,dims=2)  
p95 = vquantile(copy(M), 0.95; dims=2)  

data=DataFrame(para=vec(R[:,1]),mn=vec(mn),p5s=vec(p5),p95s=vec(p95))


@df data plot!(:para,:mn,ribbon=(:mn-:p5s,-:mn+:p95s),fillalpha=0.1,framestyle=:box,label="",foreground_color_legend=nothing,
legendfontsize=11,linewidth=2.5,thickness_scaling=1.1,grid=false,legend=:outertop,legend_column=-1,
tickfontsize=14,guidefontsize=17,widen=false,xlab=L"Nutrient\; loading\; (T_{0})",
ylab=L"Macrophyte\; abundance\; (M)",color=:darkorange,xlim=(4,8))

q=0.9

t1=@spawnat w[1] gen_rev(q,rep)
t2=@spawnat w[2] gen_rev(q,rep)
t3=@spawnat w[3] gen_rev(q,rep)
t4=@spawnat w[4] gen_rev(q,rep)
t5=@spawnat w[5] gen_rev(q,rep)
t6=@spawnat w[6] gen_rev(q,rep)
t7=@spawnat w[7] gen_rev(q,rep)
t8=@spawnat w[8] gen_rev(q,rep)
t9=@spawnat w[9] gen_rev(q,rep)
t10=@spawnat w[10] gen_rev(q,rep)
t11=@spawnat w[11] gen_rev(q,rep)
t12=@spawnat w[12] gen_rev(q,rep)
t13=@spawnat w[13] gen_rev(q,rep)
t14=@spawnat w[14] gen_rev(q,rep)
t15=@spawnat w[15] gen_rev(q,rep)

sub1=fetch(t1)
sub2=fetch(t2)
sub3=fetch(t3)
sub4=fetch(t4)
sub5=fetch(t5)
sub6=fetch(t6)
sub7=fetch(t7)
sub8=fetch(t8)
sub9=fetch(t9)
sub10=fetch(t10)
sub11=fetch(t11)
sub12=fetch(t12)
sub13=fetch(t13)
sub14=fetch(t14)
sub15=fetch(t15)

mat=hcat(sub1,sub2,sub3,sub4,sub5,sub6,sub7,sub8,sub9,sub10,sub11,sub12,sub13,sub14,sub15)


M=mat[1:100:end,:]
R=m[1:100:end,:]

mn=mean(M,dims=2)
p5 = vquantile(copy(M),0.05,dims=2)  
p95 = vquantile(copy(M), 0.95; dims=2)  

data=DataFrame(para=vec(R[:,1]),mn=vec(mn),p5s=vec(p5),p95s=vec(p95))


@df data plot!(:para,:mn,ribbon=(:mn-:p5s,-:mn+:p95s),fillalpha=0.1,framestyle=:box,label="",foreground_color_legend=nothing,
legendfontsize=11,linewidth=2.5,thickness_scaling=1.1,grid=false,legend=:outertop,legend_column=-1,
tickfontsize=14,guidefontsize=17,widen=false,xlab=L"Nutrient\; loading\; (T_{0})",
ylab=L"Macrophyte\; abundance\; (M)",color=:darkgreen,xlim=(4,8))

vline!([5.13],linewidth=1.5,linestyle=:dash,color=:grey,label="",dpi=750)

#savefig("shallow_lake_k0.8_revise1.png")




